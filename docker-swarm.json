{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "SSMAccessRole": {
           "Type": "AWS::IAM::Role",
           "Properties": {
              "AssumeRolePolicyDocument": {
                 "Version" : "2012-10-17",
                 "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                       "Service": [ "ec2.amazonaws.com" ]
                    },
                    "Action": [ "sts:AssumeRole" ]
                 } ]
              },
              "Path": "/"
           }
        },
        "SSMRolePolicies": {
           "Type": "AWS::IAM::Policy",
           "Properties": {
              "PolicyName": "ssmProperties",
              "PolicyDocument": {
                 "Version" : "2012-10-17",
                 "Statement": [
                   {
                     "Effect": "Allow",
                     "Action": [
                       "ssm:DescribeParameters",
                       "ssm:PutParameter",
                       "ssm:GetParameters",
                       "ssm:DeleteParameter"
                     ],
                     "Resource": {
                       "Fn::Join" : [
                         "",
                         [
                           "arn:aws:ssm:",
                           { "Ref" : "AWS::Region" },
                           ":",
                           { "Ref" : "AWS::AccountId"},
                           {
                             "Fn::Join" : [
                               "",
                               [ ":parameter/", { "Ref": "AWS::StackName" }, ".*" ]
                             ]
                           }
                         ]
                       ]
                      }
                     }
                   ]
              },
              "Roles": [ { "Ref": "SSMAccessRole" } ]
           }
        },
        "SSMInstanceProfile": {
           "Type": "AWS::IAM::InstanceProfile",
           "Properties": {
              "Path": "/",
              "Roles": [ { "Ref": "SSMAccessRole" } ]
           }
        },
        "initiatorIp" : {
          "Type" : "AWS::SSM::Parameter",
          "Properties" : {
            "Name" : {
              "Fn::Join" : [
                "",
                [ { "Ref": "AWS::StackName" }, ".initiatorIp" ]
              ]
            },
            "Type" : "String",
            "Value" : "0",
            "Description": "IP address of initial swarm cluster manager."
          }
        },
        "managerToken" : {
          "Type" : "AWS::SSM::Parameter",
          "Properties" : {
            "Name" : {
              "Fn::Join" : [
                "",
                [ { "Ref": "AWS::StackName" }, ".managerToken" ]
              ]
            },
            "Type" : "String",
            "Value" : "0",
            "Description": "Swarm cluster manager token."
          }
        },
        "workerToken" : {
          "Type" : "AWS::SSM::Parameter",
          "Properties" : {
            "Name" : {
              "Fn::Join" : [
                "",
                [ { "Ref": "AWS::StackName" }, ".workerToken" ]
              ]
            },
            "Type" : "String",
            "Value" : "0",
            "Description": "Swarm cluster worker token."
          }
        },
        "swarmVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": { "Ref": "VPCCIDR" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "swarmVpc"
                    }
                ]
            }
        },
        "swarmPrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "CidrBlock": { "Fn::Join" : [ "",
                    [
                      { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      "1",
                      ".",
                      "0/24"
                    ]
                  ]
                },
                "AvailabilityZone" : {
                  "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
                },
                "Tags" : [ { "Key": "Name", "Value": "swarmPrivateSubnet1"}]
            }
        },
        "swarmPublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "MapPublicIpOnLaunch" : "true",
                "CidrBlock": { "Fn::Join" : [ "",
                    [
                      { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      "2",
                      ".",
                      "0/24"
                    ]
                  ]
                },
                "AvailabilityZone" : {
                  "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
                },
                "Tags" : [ { "Key": "Name", "Value": "swarmPublicSubnet1"}]
            }
        },
        "swarmNat1EIP" : {
          "Type" : "AWS::EC2::EIP",
          "DependsOn" : "swarmVpc",
          "Properties" : {
            "Domain" : { "Ref" : "swarmVpc" }
          }
        },
        "swarmNat1": {
          "Type" : "AWS::EC2::NatGateway",
          "Properties" : {
            "AllocationId" : { "Fn::GetAtt" : [ "swarmNat1EIP", "AllocationId" ]},
            "SubnetId" : { "Ref": "swarmPublicSubnet1" }
          }
        },
        "swarmPrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "CidrBlock": { "Fn::Join" : [ "",
                    [
                      { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      "3",
                      ".",
                      "0/24"
                    ]
                  ]
                },
                "AvailabilityZone" : {
                  "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
                },
                "Tags" : [ { "Key": "Name", "Value": "swarmPrivateSubnet2"}]
            }
        },
        "swarmPublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "MapPublicIpOnLaunch" : "true",
                "CidrBlock": { "Fn::Join" : [ "",
                    [
                      { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      "4",
                      ".",
                      "0/24"
                    ]
                  ]
                },
                "AvailabilityZone" : {
                  "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
                },
                "Tags" : [ { "Key": "Name", "Value": "swarmPublicSubnet2"}]
            }
        },
        "swarmNat2EIP" : {
          "Type" : "AWS::EC2::EIP",
          "DependsOn" : "swarmVpc",
          "Properties" : {
            "Domain" : { "Ref" : "swarmVpc" }
          }
        },
        "swarmNat2": {
          "Type" : "AWS::EC2::NatGateway",
          "Properties" : {
            "AllocationId" : { "Fn::GetAtt" : [ "swarmNat2EIP", "AllocationId" ]},
            "SubnetId" : { "Ref": "swarmPublicSubnet2" }
          }
        },
        "swarmPrivateSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "CidrBlock": { "Fn::Join" : [ "",
                    [
                      { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      "5",
                      ".",
                      "0/24"
                    ]
                  ]
                },
                "AvailabilityZone" : {
                  "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
                },
                "Tags" : [ { "Key": "Name", "Value": "swarmPrivateSubnet3"}]
            }
        },
        "swarmPublicSubnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "MapPublicIpOnLaunch" : "true",
                "CidrBlock": { "Fn::Join" : [ "",
                    [
                      { "Fn::Select" : [ "0", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      { "Fn::Select" : [ "1", { "Fn::Split" : [ ".", { "Ref": "VPCCIDR" } ] } ] },
                      ".",
                      "6",
                      ".",
                      "0/24"
                    ]
                  ]
                },
                "AvailabilityZone" : {
                  "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
                },
                "Tags" : [ { "Key": "Name", "Value": "swarmPublicSubnet3"}]
            }
        },
        "swarmNat3EIP" : {
          "Type" : "AWS::EC2::EIP",
          "DependsOn" : "swarmVpc",
          "Properties" : {
            "Domain" : { "Ref" : "swarmVpc" }
          }
        },
        "swarmNat3": {
          "Type" : "AWS::EC2::NatGateway",
          "Properties" : {
            "AllocationId" : { "Fn::GetAtt" : [ "swarmNat3EIP", "AllocationId" ]},
            "SubnetId" : { "Ref": "swarmPublicSubnet3" }
          }
        },
        "SwarmInitiatorGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": ["PublicSubnet1Route", "PublicSubnet2Route", "PublicSubnet3Route", "PrivateSubnet1Route", "PrivateSubnet2Route", "PrivateSubnet3Route"],
            "Properties": {
              "LaunchConfigurationName": {"Ref": "SwarmInitiatorLaunchConf"},
              "VPCZoneIdentifier": [{"Ref": "swarmPublicSubnet1"}, {"Ref": "swarmPublicSubnet2"}, {"Ref": "swarmPublicSubnet3"}],
              "MinSize": { "Ref": "SwarmInitiatorCount" },
              "MaxSize": { "Ref": "SwarmInitiatorCount" },
              "DesiredCapacity": { "Ref": "SwarmInitiatorCount" },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "swarm initiator",
                  "PropagateAtLaunch": "true"
                }
              ]
            }
        },
        "SwarmInitiatorLaunchConf": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn" : ["VPCGatewayAttachment"],
            "Properties": {
                "AssociatePublicIpAddress": true,
                "InstanceType": { "Ref": "InstanceTypeManager" },
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "IamInstanceProfile": {
                  "Ref": "SSMInstanceProfile"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [{"Ref": "SwarmSecurityGroup"}, { "Ref": "SwarmInitiatorSecurityGroup" }],
                "UserData" : {
                  "Fn::Base64" : {
                    "Fn::Join" : [
                      "", [
                        "#!/bin/bash -xe\n",
                        "docker swarm init --advertise-addr $(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                        "TOKEN=$(docker swarm join-token worker -q)\n",
                        "aws ssm put-parameter --name ", { "Ref" : "workerToken" }, " --type String --value \"${TOKEN}\" --overwrite --region ", { "Ref" : "AWS::Region" },"\n",
                        "MGRTOKEN=$(docker swarm join-token manager -q)\n",
                        "aws ssm put-parameter --name ", { "Ref" : "managerToken" }, " --type String --value \"${MGRTOKEN}\" --overwrite --region ", { "Ref" : "AWS::Region" },"\n",
                        "INITIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                        "aws ssm put-parameter --name ", { "Ref" : "initiatorIp" }, " --type String --value \"${INITIP}\" --overwrite --region ", { "Ref" : "AWS::Region" },"\n",
                        "docker node update --availability drain $(hostname)\n",
                        "docker run -it -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock dockersamples/visualizer \n"
                      ]
                    ]
                  }
                }
            }
        },
        "SwarmManagerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": ["SwarmInitiatorGroup"],
            "Properties": {
              "LaunchConfigurationName": {"Ref": "SwarmManagerLaunchConf"},
              "VPCZoneIdentifier": [ {"Ref": "swarmPrivateSubnet1"}, {"Ref": "swarmPrivateSubnet2"}, {"Ref": "swarmPrivateSubnet3"} ],
              "MinSize": { "Ref": "SwarmManagerCount" },
              "MaxSize": { "Ref": "SwarmManagerCount" },
              "DesiredCapacity": { "Ref": "SwarmManagerCount" },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "swarm manager",
                  "PropagateAtLaunch": "true"
                }
              ]
            }
        },
        "SwarmManagerLaunchConf": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn" : ["VPCGatewayAttachment"],
            "Properties": {
                "AssociatePublicIpAddress": true,
                "InstanceType": { "Ref": "InstanceTypeManager" },
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "IamInstanceProfile": {
                  "Ref": "SSMInstanceProfile"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [{"Ref": "SwarmSecurityGroup"}],
                "UserData" : {
                  "Fn::Base64" : {
                    "Fn::Join" : [
                      "", [
                        "#!/bin/bash -xe\n",
                        "MGRTOKEN=$(aws ssm get-parameters --name \"", { "Ref" : "managerToken" }, "\" --region ", { "Ref" : "AWS::Region" }, " | jq '.Parameters[0].Value' --raw-output)\n",
                        "INITIP=$(aws ssm get-parameters --name \"", { "Ref" : "initiatorIp" }, "\" --region ", { "Ref" : "AWS::Region" }, " | jq '.Parameters[0].Value' --raw-output)\n",
                        "docker swarm join --token $MGRTOKEN ${INITIP}:2377\n",
                        "docker node update --availability drain $(hostname)\n"
                      ]
                    ]
                  }
                }
            }
        },
        "SwarmELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
              "Subnets": [ {"Ref": "swarmPublicSubnet1"}, {"Ref": "swarmPublicSubnet2"}, {"Ref": "swarmPublicSubnet3"} ],
              "Listeners": [
                {
                  "InstancePort" : "80",
                  "Protocol": "TCP",
                  "LoadBalancerPort": "80"
                }
              ],
              "HealthCheck": {
                "HealthyThreshold" : "2",
                "Interval" : "30",
                "Target" : "HTTP:80/health",
                "Timeout" : "10",
                "UnhealthyThreshold" : "2"
              },
              "SecurityGroups": [{"Ref": "SwarmSecurityGroup"}]

            }
        },
        "SwarmWorkerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": ["SwarmInitiatorGroup"],
            "Properties": {
              "LaunchConfigurationName": {"Ref": "SwarmWorkerLaunchConf"},
              "VPCZoneIdentifier": [{ "Ref": "swarmPrivateSubnet1" }, { "Ref": "swarmPrivateSubnet2" }, { "Ref": "swarmPrivateSubnet3" }],
              "MinSize": { "Ref": "SwarmWorkerCount" },
              "MaxSize": { "Ref": "SwarmWorkerCount" },
              "DesiredCapacity": { "Ref": "SwarmWorkerCount" },
              "LoadBalancerNames": [ {"Ref": "SwarmELB"} ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "cluster worker",
                  "PropagateAtLaunch": "true"
                }
              ]
            }
        },
        "SwarmWorkerLaunchConf": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn" : ["VPCGatewayAttachment"],
            "Properties": {
                "AssociatePublicIpAddress": true,
                "InstanceType": { "Ref": "InstanceTypeWorker" },
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
                "IamInstanceProfile": {
                  "Ref": "SSMInstanceProfile"
                },
                "KeyName": { "Ref": "KeyName" },
                "SecurityGroups": [{"Ref": "SwarmSecurityGroup"}],
                "UserData" : {
                  "Fn::Base64" : {
                    "Fn::Join" : [
                      "", [
                        "#!/bin/bash -xe\n",
                        "TOKEN=$(aws ssm get-parameters --name \"", { "Ref" : "workerToken" }, "\" --region ", { "Ref" : "AWS::Region" }, " | jq '.Parameters[0].Value' --raw-output)\n",
                        "INITIP=$(aws ssm get-parameters --name \"", { "Ref" : "initiatorIp" }, "\" --region ", { "Ref" : "AWS::Region" }, " | jq '.Parameters[0].Value' --raw-output)\n",
                        "docker swarm join --token $TOKEN ${INITIP}:2377\n"
                      ]
                    ]
                  }
                }
            }
        },
      "SwarmSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "VpcId": {
                  "Ref": "swarmVpc"
              },
              "GroupDescription": "Allow access from HTTP and SSH traffic",
              "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "80",
                      "ToPort": "80",
                      "CidrIp": "0.0.0.0/0"
                  }
              ],
              "Tags" : [ { "Key": "Name", "Value": "SwarmSecurityGroup"}]
          }
        },
        "SwarmSecurityGroupIngress": {
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties" : {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": { "Ref": "SwarmSecurityGroup" },
            "GroupId": { "Fn::GetAtt": ["SwarmSecurityGroup", "GroupId"]}
          }
        },
        "SwarmInitiatorSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "VpcId": { "Ref": "swarmVpc" },
              "GroupDescription": "Allow access from SSH and port 8080 traffic to initiator",
              "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "22",
                      "ToPort": "22",
                      "CidrIp": {"Ref": "YourIp"}
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "8080",
                      "ToPort": "8080",
                      "CidrIp": "0.0.0.0/0"
                  }
              ],
                "Tags" : [ { "Key": "Name", "Value": "SwarmInitiatorSecurityGroup"}]
          }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {},
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "61782f4a-6895-47a2-92a6-8c834573b4b0"
                }
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "swarmVpc"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8679848c-c217-453d-a811-bbd3373d3560"
                }
            }
        },
        "PublicSubnet1RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "Tags" : [ { "Key": "Name", "Value": "PublicSubnet1RouteTable"}]
            }
        },
        "PublicSubnet2RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "Tags" : [ { "Key": "Name", "Value": "PublicSubnet2RouteTable"}]
            }
        },
        "PublicSubnet3RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "Tags" : [ { "Key": "Name", "Value": "PublicSubnet3RouteTable"}]
            }
        },
        "PrivateSubnet1RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "Tags" : [ { "Key": "Name", "Value": "PrivateSubnet1RouteTable"}]
            }
        },
        "PrivateSubnet2RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "Tags" : [ { "Key": "Name", "Value": "PrivateSubnet2RouteTable"}]
            }
        },
        "PrivateSubnet3RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "swarmVpc"
                },
                "Tags" : [ { "Key": "Name", "Value": "PrivateSubnet3RouteTable"}]
            }
        },
        "PublicSubnet1Route": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PublicSubnet1RouteTable"
                },
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "DependsOn": [
                "InternetGateway"
            ]
        },
        "PublicSubnet2Route": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PublicSubnet2RouteTable"
                },
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "DependsOn": [
                "InternetGateway"
            ]
        },
        "PublicSubnet3Route": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PublicSubnet3RouteTable"
                },
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "DependsOn": [
                "InternetGateway"
            ]
        },
        "PrivateSubnet1Route": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PrivateSubnet1RouteTable"
                },
                "NatGatewayId": {
                    "Ref": "swarmNat1"
                }
            },
            "DependsOn": [
                "swarmNat1"
            ]
        },
        "PrivateSubnet2Route": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PrivateSubnet2RouteTable"
                },
                "NatGatewayId": {
                    "Ref": "swarmNat2"
                }
            },
            "DependsOn": [
                "swarmNat2"
            ]
        },
        "PrivateSubnet3Route": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PrivateSubnet3RouteTable"
                },
                "NatGatewayId": {
                    "Ref": "swarmNat3"
                }
            },
            "DependsOn": [
                "swarmNat3"
            ]
        },
        "swarmPrivateSubnet1RouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet1RouteTable"
                },
                "SubnetId": {
                    "Ref": "swarmPrivateSubnet1"
                }
            }
        },
        "swarmPublicSubnet1RouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnet1RouteTable"
                },
                "SubnetId": {
                    "Ref": "swarmPublicSubnet1"
                }
            }
        },
        "swarmPrivateSubnet2RouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet2RouteTable"
                },
                "SubnetId": {
                    "Ref": "swarmPrivateSubnet2"
                }
            }
        },
        "swarmPublicSubnet2RouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnet2RouteTable"
                },
                "SubnetId": {
                    "Ref": "swarmPublicSubnet2"
                }
            }
        },
        "swarmPrivateSubnet3RouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet3RouteTable"
                },
                "SubnetId": {
                    "Ref": "swarmPrivateSubnet3"
                }
            }
        },
        "swarmPublicSubnet3RouteAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnet3RouteTable"
                },
                "SubnetId": {
                    "Ref": "swarmPublicSubnet3"
                }
            }
        }
    },
    "Mappings" : {
      "RegionMap" : {
        "us-east-1" : {
            "AMI" : "ami-f92ff686"
        }
      }
    },
    "Parameters": {
      "InstanceTypeManager": {
          "Description": "Cluster manager nodes EC2 instance type",
          "Type": "String",
          "Default": "t2.micro",
          "AllowedValues": [
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge"
          ],
          "ConstraintDescription": "must be a valid EC2 instance type."
      },
      "InstanceTypeWorker": {
          "Description": "Cluster worker nodes EC2 instance type",
          "Type": "String",
          "Default": "t2.micro",
          "AllowedValues": [
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge"
          ],
          "ConstraintDescription": "must be a valid EC2 instance type."
      },
      "KeyName": {
          "Description": "Name of your EC2 KeyPair to enable SSH access to the instances.",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
      },
      "YourIp": {
        "Description": "The current CIDR IP address of your workstation (x.x.x.x/32).",
        "Type": "String"
      },
      "SwarmInitiatorCount": {
          "Description": "Number of swarm cluster initiator manager nodes to create (must be 1).",
          "Type": "Number",
          "MinValue": "1",
          "MaxValue": "1",
          "Default": "1"
      },
      "SwarmManagerCount": {
          "Description": "Number of additional swarm cluster manager nodes to create.",
          "Type": "Number",
          "MinValue": "0",
          "MaxValue": "6",
          "Default": "2"
      },
      "SwarmWorkerCount": {
          "Description": "Number of swarm cluster worker nodes to create.",
          "Type": "Number",
          "MinValue": "1",
          "MaxValue": "5",
          "Default": "2"
      },
      "VPCCIDR": {
          "Description": "VPC CIDR network address.",
          "Type": "String",
          "Default": "10.10.0.0/18"
      }
    },
    "Outputs": {
        "swarmELB": {
          "Value": {"Fn::GetAtt": ["SwarmELB","DNSName"]},
          "Description": "swarm load balancer dns name"
        }
    }
}
